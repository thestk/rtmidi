# -*- Autoconf -*-
# Process this file with autoconf to produce a configure script.
ifdef([lt_current],,[m4_include(configure.version)])

m4_define([lt_version_info], [lt_current:lt_revision:lt_age])
m4_define([lt_current_minus_age], [m4_eval(lt_current - lt_age)])

RTMIDI_SO_VERSION=lt_version_info
AC_SUBST(RTMIDI_SO_VERSION)

# Checks for package options and external software
AC_CANONICAL_HOST

# initialize the variables for the makefile
AC_SUBST(noinst_LIBRARIES)
AC_SUBST(noinst_PROGRAMS)
AC_SUBST(TESTS)
dnl AC_SUBST(SUBDIRS)
AC_SUBST(lib_LTLIBRARIES)
AC_SUBST(EXTRA_DIST)
AC_SUBST(RTMIDI_TS_SUFFIX,[ts])
AC_SUBST(rtmidi_visibility)
AC_SUBST(rtmidi_pkconfig_requirements)
AM_CONDITIONAL(RTMIDI_STANDALONE,test "$rtmidi_standalone" = "yes")
# Checks for programs.
AC_PROG_CXX
AM_PROG_AR
dnl AC_PATH_PROG(AR, ar, no)
dnl if [[ $AR = "no" ]] ; then
dnl    AC_MSG_ERROR("Could not find ar - needed to create a library");
dnl fi



LT_INIT([win32-dll])

AC_LANG_PUSH(C++)
AX_CXX_COMPILE_STDCXX(11)

rtmidi_test_flags="-Wall -Wextra"
rtmidi_visibility="-fvisibility=hidden"

# Checks for header files.
AC_HEADER_STDC
#AC_CHECK_HEADERS(sys/ioctl.h unistd.h)

# Check version number coherency between RtMidi.h and configure.ac
AC_MSG_CHECKING([that version numbers are coherent])
RTMIDI_VERSION=`sed -n 's/#define RTMIDI_VERSION "\(.*\)"/\1/p' "$rtmidi_subdir/RtMidi.h"`
AS_IF(
   [test "x$RTMIDI_VERSION" != "x$PACKAGE_VERSION"],
   [AC_MSG_FAILURE([testing RTMIDI_VERSION==PACKAGE_VERSION failed, check that RtMidi.h defines RTMIDI_VERSION as "$PACKAGE_VERSION" or that the first line of configure.ac has been updated.])])




AC_ARG_WITH(suffix,
AS_HELP_STRING([--with-suffix],[add a suffix to the library. Default is $rtmidi_suffix]),
[AS_IF(test "x$with_suffix" = "xno",
		[ rtmidi_suffix=""],
		[ rtmidi_suffix="$with_suffix"])])
AC_SUBST(rtmidi_suffix)



# Check for debug
AC_MSG_CHECKING(whether to compile debug version)
AC_ARG_ENABLE(debug,
AS_HELP_STRING([--enable-debug],[enable various debug output]),
	[
	AC_SUBST( RTMIDI_CPPFLAGS, [-D__RTMIDI_DEBUG__] )
	AC_SUBST( RTMIDI_CXXFLAGS, [-g] )
	AC_SUBST( object_path, [Debug] )
	AC_MSG_RESULT(yes)],
	[AC_SUBST( RTMIDI_CPPFLAGS, [] )
	AC_SUBST( RTMIDI_CXXFLAGS, [-O3] )
	AC_SUBST( object_path, [Release] )
	rtmidi_visibility="${rtmidi_visibility} -fvisibility=hidden"
	AC_MSG_RESULT(no)])


# Checks for doxygen
AC_CHECK_PROG( DOXYGEN, [doxygen], [doxygen] )
AM_CONDITIONAL( MAKE_DOC, [test "x${DOXYGEN}" != x] )

# Copy doc files to build dir if necessary
AC_CONFIG_LINKS( [doc/doxygen/footer.html:doc/doxygen/footer.html] )
AC_CONFIG_LINKS( [doc/doxygen/header.html:doc/doxygen/header.html] )
AC_CONFIG_LINKS( [doc/doxygen/tutorial.txt:doc/doxygen/tutorial.txt] )
AC_CONFIG_LINKS( [doc/images/ccrma.gif:doc/images/ccrma.gif] )
AC_CONFIG_LINKS( [doc/images/mcgill.gif:doc/images/mcgill.gif] )


dnl # Set paths if prefix is defined
dnl if test "x$prefix" != "x" && test "x$prefix" != "xNONE"; then
dnl  LIBS="$LIBS -L$prefix/lib"
dnl  CPPFLAGS="$CPPFLAGS -I$prefix/include"
dnl fi

# Check compiler and use -Wall if supported.
for flag in $rtmidi_test_flags
do
	tmpcxxflags="$CXXFLAGS"
	CXXFLAGS="$CXXFLAGS $flag"
	AC_MSG_CHECKING([whether $CXX supports $flag])
	AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[]],[[]])],
				[AC_MSG_RESULT([yes])],
				[CXXFLAGS="$tmpcxxflags"
					AC_MSG_RESULT([no])])
	AC_LANG_PUSH(C)
	tmpcflags="$CFLAGS"
	CFLAGS="$CFLAGS $flag"
	AC_MSG_CHECKING([whether $CC supports $flag])
	AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[]],[[]])],
				[AC_MSG_RESULT([yes])],
				[CFLAGS="$tmpcflags"
				AC_MSG_RESULT([no])])
	AC_LANG_POP(C)
done

# Check compiler and use -Wall if supported.
tmpcflags="$CFLAGS"
tmpcxxflags="$CXXFLAGS"
rtmidi_visibility_result=""
for flag in $rtmidi_visibility
do
	CXXFLAGS="$tmpcxxflags $rtmidi_visibility_result $flag"
	AC_MSG_CHECKING([whether $CXX supports $flag])
	AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[]],[[]])],
	[
		rtmidi_visibility_result="$rtmidi_visibility_result $flag"
		AC_MSG_RESULT([yes])
	],[AC_MSG_RESULT([no])])
done
rtmidi_visibility="$rtmidi_visibility_result"


dnl mudflap is not possible with g++ 4.7.1 and wxWidgets 2.8
dnl		tmpcxxflags="$CXXFLAGS"
dnl		tmplibs="$LIBS"
dnl		CXXFLAGS="$CXXFLAGS -fmudflapth"
dnl		LIBS="-lmudflapth"
dnl		AC_MSG_CHECKING([whether $CXX supports  -fmudflapth -lmudflapth])
dnl		AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[]],[[]])],
dnl					[AC_MSG_RESULT([yes])],
dnl				[CXXFLAGS="$tmpcxxflags"
dnl				LIBS="$tmplibs"]
dnl					[AC_MSG_RESULT([no])])
dnl

AC_ARG_ENABLE(address-sanitizer,
	AS_HELP_STRING([--enable-address-sanitizer],[Enable gcc/clang address santizer]),
	[AS_IF(test "$enableval" = yes,

		AC_LANG_PUSH(C++)
		for flag in  -fsanitize=address  -fno-omit-frame-pointer  -fno-common
		do
			tmpcxxflags="$CXXFLAGS"
			CXXFLAGS="$CXXFLAGS $flag"
			AC_MSG_CHECKING([whether $CXX supports $flag])
			AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[]],[[]])],
						[AC_MSG_RESULT([yes])],
						[CXXFLAGS="$tmpcxxflags"
					AC_MSG_RESULT([no])])
			AC_LANG_PUSH(C)
			tmpcflags="$CFLAGS"
			CFLAGS="$CFLAGS $flag"
			AC_MSG_CHECKING([whether $CC supports $flag])
			AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[]],[[]])],
						[AC_MSG_RESULT([yes])],
						[CFLAGS="$tmpcflags"
					AC_MSG_RESULT([no])])
			AC_LANG_POP(C)
		done
		AC_LANG_POP(C++)
		)
	]
)

AC_ARG_ENABLE(thread-sanitizer,
	AS_HELP_STRING([--enable-thread-sanitizer],[Enable gcc/clang thread santizer]),
	[AS_IF(test "$enableval" = yes,
		AC_LANG_PUSH(C++)
		for flag in  -fsanitize=thread  -fno-omit-frame-pointer  -fno-common -fPIC
		do
			tmpcxxflags="$CXXFLAGS"
			CXXFLAGS="$CXXFLAGS $flag"
			AC_MSG_CHECKING([whether $CXX supports $flag])
			AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[]],[[]])],
						[AC_MSG_RESULT([yes])],
						[CXXFLAGS="$tmpcxxflags"
					AC_MSG_RESULT([no])])
			AC_LANG_PUSH(C)
			tmpcflags="$CFLAGS"
			CFLAGS="$CFLAGS $flag"
			AC_MSG_CHECKING([whether $CC supports $flag])
			AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[]],[[]])],
						[AC_MSG_RESULT([yes])],
						[CFLAGS="$tmpcflags"
					AC_MSG_RESULT([no])])
			AC_LANG_POP(C)
		done
		for flag in  -pie
		do
			tmpldflags="$LDFLAGS"
			LDFLAGS="$LDFLAGS $flag"
			AC_MSG_CHECKING([whether $LD supports $flag])
			AC_LINK_IFELSE([AC_LANG_PROGRAM([[]],[[]])],
						[AC_MSG_RESULT([yes])],
						[LDFLAGS="$tmpldflags"
					AC_MSG_RESULT([no])])
		done
		AC_LANG_POP(C++)
		)
	]
)

dnl AC_SUBST( sharedlib, ["librtmidi.so"] )
dnl AC_SUBST( sharedname, ["librtmidi.so.\$(RELEASE)"] )
dnl AC_SUBST( libflags, ["-shared -Wl,-soname,\$(SHARED).\$(MAJOR) -o \$(SHARED).\$(RELEASE)"] )
dnl case $host in
dnl  *-apple*)
dnl  AC_SUBST( sharedlib, ["librtmidi.dylib"] )
dnl  AC_SUBST( sharedname, ["librtmidi.\$(RELEASE).dylib"] )
dnl  AC_SUBST( libflags, ["-dynamiclib -o librtmidi.\$(RELEASE).dylib"] )
dnl esac



dnl sem_timedwait may not be availlable on Mac OS X
# Check for POSIX semaphore support
AC_CHECK_HEADER([semaphore.h], [
  AC_CHECK_LIB(pthread, sem_timedwait,
    AC_DEFINE([HAVE_SEMAPHORE],[1],[Define to 1 if you have POSIX semaphore support on your system.]),
    AC_MSG_WARN([POSIX semaphore support not found; data may be lost on closePort]))
])

AC_MSG_CHECKING(whether to check all apis)
AC_ARG_ENABLE(apisearch,
	AS_HELP_STRING([--disable-apisearch],[disable all unrequested apis]),
	[
		AS_IF([test "x$enableval" = "xno"],[
			         AC_MSG_RESULT(no)
				 AS_IF([test "x$with_alsa" = "x"],[with_alsa=no])
				 AS_IF([test "x$with_jack" = "x"],[with_jack=no])
				 AS_IF([test "x$with_winmm" = "x"],[with_winmm=no])
				 AS_IF([test "x$with_winks" = "x"],[with_winks=no])
				 AS_IF([test "x$with_coremidi" = "x"],[with_coremidi=no])
		],[AC_MSG_RESULT(yes)])
	],[AC_MSG_RESULT(yes)])

AC_SUBST( RTMIDI_API, [""] )
AC_SUBST( RTMIDI_LIB_CFLAGS, [""] )
AC_SUBST( RTMIDI_LIBS, [""] )
AC_MSG_CHECKING(for MIDI API)
RTMIDI_HAVE_VIRTUAL_DEVICES=no
rtmidi_check_jack=auto
case $host in
*linux*)
	PLATFORM=linux
dnl	with_winmm=no
dnl	with_winks=no
dnl	with_coremidi=no

	# Checks for pthread library.
	;;

darwin*|*apple*)
	PLATFORM=macosx
	# Check for CoreAudio framework
dnl	with_winmm=no
dnl	with_winks=no
dnl	with_alsa=no

	;;

*winnt*|*interix*|cygwin*|*mingw*|uwin*)
	PLATFORM=windows
dnl	with_alsa=no
dnl	with_coremidi=no

	# I can't get the following check to work so just manually add the library
	# or could try the following?  AC_LIB_WINMM([midiOutGetNumDevs])
	# AC_CHECK_LIB(winmm, midiInGetNumDevs, , AC_MSG_ERROR(Windows MIDI support requires the winmm library!) )],)
	AC_CACHE_CHECK([where to find support dlls], [ac_cv_rtmidi_ts_mingw_dll_dirs],
	[
		gccsearchdirs=`$CXX $CXXFLAGS -print-search-dirs|\
			sed -e '/^libraries:/ { s/^libraries: *=\?//; /;\([0-9a-zA-Z]\):/ { s,;\([0-9a-zA-Z]\):,:/\1/,g;s,^\([0-9a-zA-Z]\):,/\1/,g; s,\\\\,/,g } ;  p } ; d'` ; \
		gccsearchdirs="$WINEDLLPATH:$gccsearchdirs:\
/usr/share/doc/mingw32-runtime:\
/usr/$host/bin:\
/usr/$host/lib:\
/usr/bin/$host/:\
/usr/lib/$host/:\
/usr/lib/$host/lib:\
/usr/lib/$host/bin:\
/usr/bin/$host/lib:\
/usr/bin/$host/bin:\
/mingw/lib:\
/mingw/bin:\
/usr/lib:\
/lib:\
/usr/bin:\
/bin"
		SEARCHDIRS="$PWD:$PWD/.libs"
		old_FS="$IFS"
		IFS=:
		for d in $gccsearchdirs ;
		do
			AS_IF(test -d "$d",[ SEARCHDIRS="$SEARCHDIRS:$d" ])
		done
		IFS="$old_FS"
		ac_cv_rtmidi_ts_mingw_dll_dirs="$SEARCHDIRS"
	])

	AC_SUBST(DLLSEARCHPATH,"$ac_cv_rtmidi_ts_mingw_dll_dirs")
	rtmidicopydlls=true
	;;

*)
	# Default case for unknown realtime systems.
	AC_MSG_WARN([
		Your target system could not be recognized. $PACKAGE depends on
		a working MIDI configuration for your System. We are trying all
		supported APIs. The result may be varying.

		Please contact the development team at

			$PACKAGE_BUGREPORT

		and provide the following information:

		* The output of configure
		* The description of your System.

	])
	;;
esac

AC_ARG_WITH(jack,
	AS_HELP_STRING([--with-jack],[choose JACK server support (needs libjack to be installed)]),[
		echo running jack:
		AS_IF([test "x$with_jack" = "xno"],,[RTMIDI_LIB_JACK ])
	],[ echo runnning jack 2 ; RTMIDI_LIB_JACK(,[true]) ])

AC_ARG_WITH(alsa, AS_HELP_STRING([--with-alsa],[choose native ALSA sequencer API support]),[
		AS_IF([test "x$with_alsa" = "xno"],,[ RTMIDI_LIB_ALSA ])
		],[ RTMIDI_LIB_ALSA(,[true]) ])

AC_ARG_WITH(winmm, AS_HELP_STRING([--with-winmm],[choose native Windows Multimedia API support]),[
		AS_IF([test "x$with_winmm" = "xno"],,[RTMIDI_LIB_WINMM ])
	],[ RTMIDI_LIB_WINMM(,[true]) ])

AC_ARG_WITH(winks, AS_HELP_STRING([--with-winks],[choose native Windows kernel streaming API support]),[
		AS_IF([test "x$with_winks" = "xno"],,[ RTMIDI_LIB_WINKS ])
	],[ RTMIDI_LIB_WINKS(,[true]) ])

AC_ARG_WITH(coremidi, AS_HELP_STRING([--with-coremidi],[choose native CoreAudio API support]),[
		AS_IF([test "x$with_coremidi" = "xno"],,[RTMIDI_LIB_COREMIDI ])
	],[ RTMIDI_LIB_COREMIDI(,[true]) ])

AS_IF([test "x$RTMIDI_API" = "x"],[
		AC_MSG_WARN("No suitable MIDI interface found. Using dummy driver")
		RTMIDI_API="-D__RTMIDI_DUMMY__"
])

AM_CONDITIONAL(RTMIDI_HAVE_VIRTUAL_DEVICES,test "$RTMIDI_HAVE_VIRTUAL_DEVICES" == yes)
AM_GNU_GETTEXT([external])
AM_GNU_GETTEXT_VERSION([0.18.3])

if test "x$rtmidicopydlls" = "x"
then
	rtmidicopydlls=false
fi

AM_CONDITIONAL(RTMIDICOPYDLLS,$rtmidicopydlls && test -n "$DLLSEARCHPATH")


AX_CHECK_FALLTHROUGH_SYNTAX
AC_DEFINE_UNQUOTED(RTMIDI_FALLTHROUGH,
	[$ax_cv_check_cxx_fallthrough_syntax_],
	[syntax for switch case fallthrough attributes in C++])
AC_LANG_POP(C++)
